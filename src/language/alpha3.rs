use std::fmt;
use strum_macros::{EnumIter, EnumString};

#[derive(Debug, PartialEq, EnumString, EnumIter)]
pub enum Alpha3 {
    None,
    // ENUM START
    AAR,
    AFR,
    AKA,
    AMH,
    ARA,
    ASM,
    AVA,
    AYM,
    AZE,
    BAK,
    BAM,
    BEL,
    BEN,
    BOS,
    BRE,
    BUL,
    CAT,
    CES,
    CHE,
    CHU,
    CHV,
    COS,
    CYM,
    DAN,
    DEU,
    DZO,
    ELL,
    ENG,
    EST,
    EUS,
    EWE,
    FAO,
    FAS,
    FIN,
    FRA,
    FRY,
    FUL,
    GLA,
    GLE,
    GLG,
    GRN,
    GUJ,
    HAT,
    HAU,
    HBS,
    HEB,
    HER,
    HIN,
    HMO,
    HRV,
    HUN,
    HYE,
    IBO,
    IKU,
    IND,
    ITA,
    JAV,
    KAN,
    KAS,
    KAT,
    KAU,
    KAZ,
    KHM,
    KIN,
    KIR,
    KOM,
    KON,
    KOR,
    KUR,
    LAO,
    LAT,
    LAV,
    LIN,
    LIT,
    LTZ,
    LUG,
    MAL,
    MAR,
    MKD,
    MON,
    MSA,
    MYA,
    NBL,
    NDE,
    NEP,
    NLD,
    NNO,
    NOB,
    NOR,
    NYA,
    OCI,
    ORI,
    ORM,
    PAN,
    POL,
    POR,
    PUS,
    QUE,
    ROH,
    RON,
    RUN,
    RUS,
    SAG,
    SAN,
    SLK,
    SLV,
    SME,
    SNA,
    SND,
    SOM,
    SOT,
    SPA,
    SQI,
    SRD,
    SRP,
    SSW,
    SWA,
    SWE,
    TAM,
    TAT,
    TEL,
    TGK,
    THA,
    TIR,
    TSN,
    TSO,
    TUK,
    TUR,
    TWI,
    UIG,
    UKR,
    URD,
    UZB,
    VEN,
    VIE,
    WOL,
    XHO,
    YOR,
    ZHA,
    ZHO,
    ZUL,
    // ENUM END
}

impl Alpha3 {
    pub fn is_none(&self) -> bool {
        match *self {
            Alpha3::None => true,
            _ => false,
        }
    }
}

impl fmt::Display for Alpha3 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
