use std::fmt;
use strum_macros::{EnumIter, EnumString};

#[derive(Debug, PartialEq, EnumString, EnumIter)]
pub enum Tld {
    None,
    // ENUM START
    AD,
    AE,
    AF,
    AL,
    AM,
    AN,
    AO,
    AR,
    AT,
    AZ,
    BA,
    BD,
    BE,
    BF,
    BG,
    BI,
    BJ,
    BN,
    BO,
    BR,
    BT,
    BW,
    BY,
    BZ,
    CA,
    CD,
    CF,
    CG,
    CH,
    CI,
    CL,
    CM,
    CN,
    CO,
    CR,
    CS,
    CU,
    CZ,
    DE,
    DJ,
    DK,
    DO,
    DZ,
    EC,
    EE,
    EG,
    EH,
    ER,
    ES,
    ET,
    FI,
    FR,
    GA,
    GE,
    GF,
    GH,
    GI,
    GM,
    GN,
    GP,
    GQ,
    GR,
    GT,
    GW,
    GY,
    HN,
    HR,
    HT,
    HU,
    ID,
    IE,
    IL,
    IN,
    IQ,
    IR,
    IT,
    JO,
    KE,
    KG,
    KH,
    KP,
    KR,
    KW,
    KZ,
    LA,
    LB,
    LI,
    LR,
    LS,
    LT,
    LU,
    LV,
    LY,
    MA,
    MC,
    MD,
    ME,
    MK,
    ML,
    MM,
    MN,
    MR,
    MW,
    MX,
    MY,
    MZ,
    NA,
    NE,
    NG,
    NI,
    NL,
    NO,
    NP,
    OM,
    PA,
    PE,
    PG,
    PK,
    PL,
    PS,
    PT,
    PY,
    QA,
    RO,
    RS,
    RU,
    RW,
    SA,
    SD,
    SE,
    SI,
    SK,
    SL,
    SM,
    SN,
    SO,
    SR,
    SV,
    SX,
    SY,
    SZ,
    TD,
    TG,
    TH,
    TJ,
    TL,
    TM,
    TN,
    TR,
    TZ,
    UA,
    UG,
    UK,
    US,
    UY,
    UZ,
    VA,
    VE,
    VN,
    YE,
    ZA,
    ZM,
    ZW,
    // ENUM END
}

impl Tld {
    pub fn is_none(&self) -> bool {
        match *self {
            Tld::None => true,
            _ => false,
        }
    }
}

impl fmt::Display for Tld {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, ".{:?}", self)
    }
}
