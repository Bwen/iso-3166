use std::fmt;
use strum_macros::{EnumIter, EnumString};

#[derive(Debug, PartialEq, EnumString, EnumIter)]
pub enum Fips {
    None,
    // ENUM START
    AE,
    AF,
    AG,
    AJ,
    AL,
    AM,
    AN,
    AO,
    AR,
    AU,
    BC,
    BE,
    BG,
    BH,
    BK,
    BL,
    BM,
    BN,
    BO,
    BR,
    BT,
    BU,
    BX,
    BY,
    CA,
    CB,
    CD,
    CF,
    CG,
    CH,
    CI,
    CM,
    CO,
    CS,
    CT,
    CU,
    DA,
    DJ,
    DR,
    EC,
    EG,
    EI,
    EK,
    EN,
    ER,
    ES,
    ET,
    EZ,
    FG,
    FI,
    FR,
    GA,
    GB,
    GG,
    GH,
    GI,
    GM,
    GR,
    GT,
    GV,
    GY,
    HA,
    HO,
    HR,
    HU,
    ID,
    IN,
    IR,
    IS,
    IT,
    IV,
    IZ,
    JO,
    KE,
    KG,
    KN,
    KS,
    KU,
    KZ,
    LA,
    LE,
    LG,
    LH,
    LI,
    LO,
    LS,
    LT,
    LU,
    LY,
    MD,
    MG,
    MI,
    MJ,
    MK,
    ML,
    MN,
    MO,
    MR,
    MU,
    MX,
    MY,
    MZ,
    NG,
    NI,
    NL,
    NN,
    NO,
    NP,
    NS,
    NT,
    NU,
    PA,
    PE,
    PK,
    PL,
    PM,
    PO,
    PP,
    PU,
    QA,
    RI,
    RN,
    RO,
    RS,
    RW,
    SA,
    SF,
    SG,
    SI,
    SL,
    SM,
    SO,
    SP,
    SU,
    SW,
    SY,
    SZ,
    TH,
    TI,
    TO,
    TS,
    TT,
    TU,
    TX,
    TZ,
    UG,
    UK,
    UP,
    US,
    UV,
    UY,
    UZ,
    VE,
    VM,
    VT,
    WA,
    WE,
    WI,
    WZ,
    YI,
    YM,
    ZA,
    ZI,
    // ENUM END
}

impl Fips {
    pub fn is_none(&self) -> bool {
        match *self {
            Fips::None => true,
            _ => false,
        }
    }
}

impl fmt::Display for Fips {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
