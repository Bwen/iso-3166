use std::fmt;
use strum_macros::{EnumIter, EnumString};

#[derive(Debug, PartialEq, EnumString, EnumIter)]
pub enum Alpha3 {
    None,
    // ENUM START
    AFG,
    AGO,
    ALB,
    AND,
    ANT,
    ARE,
    ARG,
    ARM,
    AUT,
    AZE,
    BDI,
    BEL,
    BEN,
    BFA,
    BGD,
    BGR,
    BIH,
    BLR,
    BLZ,
    BOL,
    BRA,
    BRN,
    BTN,
    BWA,
    CAF,
    CAN,
    CHE,
    CHL,
    CHN,
    CIV,
    CMR,
    COD,
    COG,
    COL,
    CRI,
    CUB,
    CZE,
    DEU,
    DJI,
    DNK,
    DOM,
    DZA,
    ECU,
    EGY,
    ERI,
    ESH,
    ESP,
    EST,
    ETH,
    FIN,
    FRA,
    GAB,
    GBR,
    GEO,
    GHA,
    GIB,
    GIN,
    GMB,
    GNB,
    GNQ,
    GRC,
    GTM,
    GUF,
    GUY,
    HND,
    HRV,
    HTI,
    HUN,
    IDN,
    IND,
    IRL,
    IRN,
    IRQ,
    ISR,
    ITA,
    JOR,
    KAZ,
    KEN,
    KGZ,
    KHM,
    KOR,
    KWT,
    LAO,
    LBN,
    LBR,
    LBY,
    LIE,
    LSO,
    LTU,
    LUX,
    LVA,
    MAF,
    MAR,
    MCO,
    MDA,
    MEX,
    MKD,
    MLI,
    MMR,
    MNE,
    MNG,
    MOZ,
    MRT,
    MWI,
    MYS,
    NAM,
    NER,
    NGA,
    NIC,
    NLD,
    NOR,
    NPL,
    OMN,
    PAK,
    PAN,
    PER,
    PNG,
    POL,
    PRK,
    PRT,
    PRY,
    PSE,
    QAT,
    ROU,
    RUS,
    RWA,
    SAU,
    SCG,
    SDN,
    SEN,
    SLE,
    SLV,
    SMR,
    SOM,
    SRB,
    SUR,
    SVK,
    SVN,
    SWE,
    SWZ,
    SXM,
    SYR,
    TCD,
    TGO,
    THA,
    TJK,
    TKM,
    TLS,
    TUN,
    TUR,
    TZA,
    UGA,
    UKR,
    URY,
    USA,
    UZB,
    VAT,
    VEN,
    VNM,
    YEM,
    ZAF,
    ZMB,
    ZWE,
    // ENUM END
}

impl Alpha3 {
    pub fn is_none(&self) -> bool {
        match *self {
            Alpha3::None => true,
            _ => false,
        }
    }
}

impl fmt::Display for Alpha3 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
